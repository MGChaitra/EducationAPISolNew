@page "/"
@using EducationWebApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json;
@using ModelDll
@using iText
@inject IJSRuntime JSRuntime
@inject OpenAIService OpenAIService
@inject GenerateQuizPDFContentService gen
<h3>Quiz Generator</h3>
<br />
<br />
<EditForm Model="@request" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="topic">Select Topic</label>
        <InputSelect id="topic" class="form-control" @bind-Value="request.Subject">
            <option value="">-- Select Topic --</option>
            @foreach (var topic in availableTopics)
            {
                <option value="@topic">@topic</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => request.Subject)" />
    </div><br />

    <div class="form-group">
        <label for="difficulty">Select Difficulty</label>
        <InputSelect id="difficulty" class="form-control" @bind-Value="request.Difficulty">
            <option value="">-- Select Difficulty --</option>
            @foreach (var difficulty in availableDifficulties)
            {
                <option value="@difficulty">@difficulty</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => request.Difficulty)" />
    </div><br />

    <div class="form-group">
        <label for="number">Number of Questions</label>
        <InputNumber id="number" class="form-control" @bind-Value="request.Number" />
        <span class="form-text">Tip: The Number of Questions must be between 1 and 25.</span>
        <ValidationMessage For="@(() => request.Number)" />
    </div>
    <div class="d-flex flex-wrap">
        <button type="submit" class="btn btn-primary mt-3 me-2" @onclick="() => OnGenerateMCQQuiz()">MCQ Question</button>
        <button type="submit" class="btn btn-primary mt-3 me-2" @onclick="() => OnGenerateShortQuiz()">Short Answer Question</button>
        <button type="submit" class="btn btn-primary mt-3" @onclick="() => OnGenerateLongQuiz()">Long Answer Question</button>
    </div>
</EditForm>
@if (isLoading)
{
    <p>Loading quiz...</p>
}
@if (!string.IsNullOrEmpty(formattedQuizContent))
{
    <div class="quiz-content">
        <h5>Generated Quiz On @request.Subject:</h5>
        <pre>@formattedQuizContent</pre>
    </div>
}
@if (!string.IsNullOrEmpty(formattedQuizContent))
{
    <div class="mt-3">
        <button class="btn btn-success mt-3" @onclick="DownloadQuizAsPDF">Download Quiz as PDF</button>
    </div>
}

@code {
    // Create seperate razor.cs file for this code
    private Request request = new Request();
    // Try to get the list from enum rather than hardcoding
    private List<string> availableTopics = new List<string> { "Mathematics", "Science", "History", "Geography" };
    private List<string> availableDifficulties = new List<string> { "Easy", "Intermediate", "Hard" };
    private bool isLoading = false;
    private string formattedQuizContent = string.Empty;

    private async Task GenerateQuiz(string quizType)
    {
        isLoading = true;
        string jsonResponse = quizType switch
        {

            // Instead of directly invoking the GetMCQQuizContentAsync,GetShortAnswerQuizContentAsync,GetLongAnswerQuizContentAsync methods you should create the interface for IOpenAIService and implement it
            // Can pass the object to the method instead of passing each parameters seperately
            "MCQ" => await OpenAIService.GetMCQQuizContentAsync(request.Subject, request.Difficulty, request.Number),
            "ShortAnswer" => await OpenAIService.GetShortAnswerQuizContentAsync(request.Subject, request.Difficulty, request.Number),
            "LongAnswer" => await OpenAIService.GetLongAnswerQuizContentAsync(request.Subject, request.Difficulty, request.Number),
            _ => throw new InvalidOperationException("Invalid quiz type")
        };

        formattedQuizContent = jsonResponse ?? "No content available."; ;
        isLoading = false;
    }
    private void HandleValidSubmit() { }
    private async Task DownloadQuizAsPDF()
    {
        var pdfContent = gen.GenerateQuizPDFContent(request.Subject, formattedQuizContent);
        var fileName = $"{request.Subject}_Quiz.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfContent));
    }
    private async Task OnGenerateMCQQuiz() => await GenerateQuiz("MCQ");
    private async Task OnGenerateShortQuiz() => await GenerateQuiz("ShortAnswer");
    private async Task OnGenerateLongQuiz() => await GenerateQuiz("LongAnswer");
}
